# -*- coding: utf-8 -*-
"""JanataHack: Demand Forecasting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vSwQcf8y2TXq-w9IrCXULFca8aub6bz9
"""

!wget https://datahack-prod.s3.amazonaws.com/test_file/test_nfaJ3J5.csv
!wget https://datahack-prod.s3.amazonaws.com/train_file/train_0irEZ2H.csv
!wget https://datahack-prod.s3.amazonaws.com/sample_submission/sample_submission_pzljTaX.csv

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

train = pd.read_csv('train_0irEZ2H.csv')
test = pd.read_csv('test_nfaJ3J5.csv')

train.tail(5)

test.head(5)

train.isnull().sum(),test.isnull().sum(),train.shape,test.shape,train.dtypes

train['total_price']=train['total_price'].fillna(method='bfill')

k=['week']
for i in k:
  train[i] = pd.to_datetime(train[i])
  test[i] = pd.to_datetime(test[i])

for i in k:
  test[i+'_'+'day'] = test[i].dt.day
  test[i+'_'+'weekofyear'] = test[i].dt.weekofyear
  test[i+'_'+'month'] = test[i].dt.month
  test[i+'_'+'dayofweek'] =test[i].dt.dayofweek
  test[i+'_'+'weekend'] = (test[i].dt.weekday >=5).astype(int)
  train[i+'_'+'day'] = train[i].dt.day
  train[i+'_'+'weekofyear'] = train[i].dt.weekofyear
  train[i+'_'+'month'] = train[i].dt.month
  train[i+'_'+'dayofweek'] = train[i].dt.dayofweek
  train[i+'_'+'weekend'] = (train[i].dt.weekday >=5).astype(int)

train.nunique(),test.nunique()

del train['week']
del test['week']

train_df=train
test_df=test

X = train_df.drop(labels=['units_sold'], axis=1)
y = train_df['units_sold'].values

from sklearn.model_selection import train_test_split
X_train, X_cv, y_train, y_cv = train_test_split(X, y, test_size=0.10, random_state=42)

X_train.shape, y_train.shape, X_cv.shape, y_cv.shape

from math import sqrt 
from sklearn.metrics import mean_squared_log_error, mean_squared_error

import lightgbm as lgb
train_data = lgb.Dataset(X_train, label=y_train)
test_data = lgb.Dataset(X_cv, label=y_cv)

param = {'objective': 'regression',
         'boosting': 'gbdt',  
         'metric': 'l2_root',
         'learning_rate': 0.1, 
         'num_iterations': 3500,
         'num_leaves': 200,
         'max_depth': -1,
         'min_data_in_leaf': 12,
         'bagging_fraction': 0.90,
         'bagging_freq': 1,
         'bagging_seed': 3,
         'feature_fraction': 0.80,
         'feature_fraction_seed': 2,
         'early_stopping_round': 200,
         'max_bin': 200
         }

lgbm = lgb.train(params=param, verbose_eval=100, train_set=train_data, valid_sets=[test_data])

y_pred_lgbm = lgbm.predict(X_cv)
print('RMSLE:', mean_squared_error(y_cv,y_pred_lgbm))

import seaborn as sns
feature_imp = pd.DataFrame(sorted(zip(lgbm.feature_importance(), X.columns), reverse=True)[:50], 
                           columns=['Value','Feature'])
plt.figure(figsize=(12, 10))
sns.barplot(x="Value", y="Feature", data=feature_imp.sort_values(by="Value", ascending=False))
plt.title('LightGBM Features')
plt.tight_layout()
plt.show()

Xtest = test_df

from sklearn.model_selection import KFold
from lightgbm import LGBMRegressor

errlgb = []
y_pred_totlgb = []

fold = KFold(n_splits=10, shuffle=True, random_state=101)

for train_index, test_index in fold.split(X):
    X_train, X_test = X.loc[train_index], X.loc[test_index]
    y_train, y_test = y[train_index], y[test_index]

    lgbm = LGBMRegressor(**param)
    #lgbm = LGBMRegressor(learning_rate=0.1, n_estimators=1000, random_state=101, subsample=0.8)
    lgbm.fit(X_train, y_train, eval_set=[(X_test, y_test)], verbose=0, early_stopping_rounds=200)

    y_pred_lgbm = lgbm.predict(X_test)
    print("RMSLE LGBM: ", mean_squared_error(y_test, y_pred_lgbm))

    errlgb.append(mean_squared_error(y_test,y_pred_lgbm))
    p = lgbm.predict(Xtest)
    y_pred_totlgb.append(p)

np.mean(errlgb,0)

lgbm_final = np.mean(y_pred_totlgb,0)
lgbm_final

submission = pd.DataFrame({
        "record_ID": test['record_ID'],
        "units_sold":abs(lgbm_final)
    })
submission.to_csv('./Av_forcast.csv', index=False)
print(submission)

from google.colab import files
files.download('Av_forcast.csv')

